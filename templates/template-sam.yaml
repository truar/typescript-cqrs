AWSTemplateFormatVersion: '2010-09-09'
Transform:
  - AWS::Serverless-2016-10-31

Resources:
  DynamoResource:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub ${AWS::StackName}-dynamo-table
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      SSESpecification:
        SSEEnabled: True

  SnsTopicResource:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-sns-topic.fifo
      FifoTopic: true

  LambdaExecRoleResource:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-cloud-watch-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:eu-west-3:909133997228:*
        - PolicyName: !Sub '${AWS::StackName}-dynamo-stream-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource:
                  - !GetAtt DynamoResource.StreamArn
        - PolicyName: !Sub '${AWS::StackName}-lambda-sns-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref SnsTopicResource

  LambdaStreamToSnsResource:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-lambda-stream-to-sns'
      Role: !GetAtt LambdaExecRoleResource.Arn
      CodeUri: ./dist/apps/shopping-cart-lambda-stream-to-sns
      Handler: main.handler
      Runtime: nodejs18.x
      Timeout: 30 # default is 3s
      MemorySize: 2048 # default is 128Mi
      Architectures:
        - x86_64
      Environment:
        Variables:
          AWS_SNS_TOPIC_ARN: !Ref SnsTopicResource
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: false
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - main.js

  EventSourceStreamToLambdaResource:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      FunctionName: !Ref LambdaStreamToSnsResource
      EventSourceArn: !GetAtt DynamoResource.StreamArn
      StartingPosition: TRIM_HORIZON

  FakeListenerQueueResource:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-fake-listener.fifo'
      FifoQueue: true
      DeduplicationScope: messageGroup
      FifoThroughputLimit: perMessageGroupId
      VisibilityTimeout: 650

  SnsToSqsPolicyResource:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - Ref: FakeListenerQueueResource
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'sns.amazonaws.com'
            Resource:
              - !GetAtt FakeListenerQueueResource.Arn
            Action: 'sqs:SendMessage'
            Condition:
              ForAnyValue:ArnEquals:
                'aws:SourceArn':
                  - !Ref SnsTopicResource

  FakeListenerSubscriptionResource:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      TopicArn: !Ref SnsTopicResource
      Endpoint: !GetAtt FakeListenerQueueResource.Arn
      RawMessageDelivery: true

Outputs:
  DynamoName:
    Value: !Ref DynamoResource
  StreamArn:
    Value: !GetAtt DynamoResource.StreamArn
  SnsTopicName:
    Value: !Ref SnsTopicResource
  LambdaToSnsName:
    Value: !Ref LambdaStreamToSnsResource
